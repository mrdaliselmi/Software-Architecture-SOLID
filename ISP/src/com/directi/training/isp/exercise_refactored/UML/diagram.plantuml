@startuml Interface Segregation Principal

package com.directi.training.isp.exercise_refactored {
    interface Timed {
        + timeOutCallback(): void
    }

    interface SensorDependant {
        + proximityCallback(): void
    }

    interface Door {
        + lock(): void
        + unlock(): void
        + open(): void
        + close(): void
    }

    class Timer {
        + register(timeOut: long, obj: Timed): void
    }

    class TimedDoor {
        - TIME_OUT: int
        - _locked: boolean
        - _opened: boolean
        + TimedDoor(timer: Timer)
        + lock(): void
        + unlock(): void
        + open(): void
        + close(): void
        + timeOutCallback(): void
    }

    class Sensor {
        + register(obj: SensorDependant): void
        - isPersonClose(): boolean
    }

    class SensingDoor {
        - _locked: boolean
        - _opened: boolean
        + SensingDoor(sensor: Sensor)
        + lock(): void
        + unlock(): void
        + open(): void
        + close(): void
        + proximityCallback(): void
    }

    Timer ..> Timed : uses
    TimedDoor ..> Timer : uses
    TimedDoor ..|> Door
    TimedDoor ..> Timed : uses
    Sensor ..> SensorDependant : uses
    SensingDoor ..|> Door
    SensingDoor ..> SensorDependant : uses
    SensingDoor ..> Sensor : uses
}

@enduml
